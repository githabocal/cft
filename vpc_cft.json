
{
    "AWSTemplateFormatVersion" : "2010-09-09",
    "Description": "I am creating a VPC with a LoadBalancer and a AutoScalingGroup ",
    "Parameters": {
        "WebServerKey": {   
            "Description": "Parameterized Key will be used to SSH into EC2 instances",
            "Type":"AWS::EC2::KeyPair::KeyName"
        }
    },
    "Resources": {
        
        "VPC": {
            "Type" : "AWS::EC2::VPC",
            "Properties" : {
                "CidrBlock" : "10.0.0.0/16",
                "EnableDnsHostnames" : true,
                "EnableDnsSupport" : false,
                "InstanceTenancy" : "default",
                "Tags" : [
                    {
                        "Key": "Name",
                        "Value": "test-vpc-cft"
                    }
                ]
            }
        },
        "PublicSubnet1":{
            "Type" : "AWS::EC2::Subnet",
            "Properties" : {
                "AvailabilityZone" : {
                    "Fn::Select" : [ 
                      "0", 
                      { 
                        "Fn::GetAZs" : "" 
                      } 
                    ]
                  },
                "CidrBlock" : "10.0.1.0/28",
                "MapPublicIpOnLaunch" : true,
                "Tags" : [
                    {
                        "Key": "Name",
                        "Value": "public-subnet-1"
                    }
                ],
                "VpcId" : {"Ref": "VPC"}
            }
        },
        "PublicSubnet2":{
            "Type" : "AWS::EC2::Subnet",
            "Properties" : {
                "AvailabilityZone" : {
                    "Fn::Select" : [ 
                      "1", 
                      { 
                        "Fn::GetAZs" : "" 
                      } 
                    ]
                  },
                "CidrBlock" : "10.0.2.0/28",
                "MapPublicIpOnLaunch" : true,
                "Tags" : [
                    {
                        "Key": "Name",
                        "Value": "public-subnet-2"
                    }
                ],
                "VpcId" : {"Ref": "VPC"}
            }
        },
        "PrivateSubnet1":{
            "Type" : "AWS::EC2::Subnet",
            "Properties" : {
                "AvailabilityZone" : {
                    "Fn::Select" : [ 
                      "0", 
                      { 
                        "Fn::GetAZs" : "" 
                      } 
                    ]
                  },
                "CidrBlock" : "10.0.3.0/28",
                "MapPublicIpOnLaunch" : false,
                "Tags" : [
                    {
                        "Key": "Name",
                        "Value": "private-subnet-1"
                    }
                ],
                "VpcId" : {"Ref": "VPC"}
            }
        },
        "PrivateSubnet2":{
            "Type" : "AWS::EC2::Subnet",
            "Properties" : {
                "AvailabilityZone" : {
                    "Fn::Select" : [ 
                      "1", 
                      { 
                        "Fn::GetAZs" : "" 
                      } 
                    ]
                  },
                "CidrBlock" : "10.0.4.0/28",
                "MapPublicIpOnLaunch" : false,
                "Tags" : [
                    {
                        "Key": "Name",
                        "Value": "private-subnet-2"
                    }
                ],
                "VpcId" : {"Ref": "VPC"}
            }
        },
        "internetGateway" : {
            "Type" : "AWS::EC2::InternetGateway",
            "Properties" : {
                "Tags" : [ 
                    {
                        "Key" : "Name", 
                        "Value" : "test-cft-internet-gateway"
                    }
                ]
            }
        },
        "AttachGateway" : {
            "Type" : "AWS::EC2::VPCGatewayAttachment",
            "Properties" : {
               "VpcId" : { "Ref" : "VPC" },
               "InternetGatewayId" : { "Ref" : "internetGateway" }
             }
         },
        "PublicRouteTable" : {
            "Type" : "AWS::EC2::RouteTable",
            "Properties" : {
               "VpcId" : { "Ref" : "VPC" },
               "Tags" : [ 
                    {
                        "Key" : "Name", 
                        "Value" : "public-RouteTable" 
                    } 
                ]
            }
        },
        "PublicRouteRouteConfiguration" : {
            "Type" : "AWS::EC2::Route",
            "DependsOn" : "AttachGateway",
            "Properties" : {
                "RouteTableId" : { "Ref" : "PublicRouteTable" },
                "DestinationCidrBlock" : "0.0.0.0/0",
                "GatewayId" : { "Ref" : "internetGateway" }
            }
        },
        "RouteTableAssociationPublicSubnet1" : {
            "Type" : "AWS::EC2::SubnetRouteTableAssociation",
            "Properties" : {
                "SubnetId" : { "Ref" : "PublicSubnet1" },
                "RouteTableId" : { "Ref" : "PublicRouteTable" }
            }
        },
        "RouteTableAssociationPublicSubnet2" : {
            "Type" : "AWS::EC2::SubnetRouteTableAssociation",
            "Properties" : {
                "SubnetId" : { "Ref" : "PublicSubnet2" },
                "RouteTableId" : { "Ref" : "PublicRouteTable" }
            }
        },
        "NATGatewayPublicSubnet2" : {
            "Type" : "AWS::EC2::NatGateway",
            "Properties" : {
                "AllocationId" : { 
                   "Fn::GetAtt" : ["NATGatewayElasticIP", "AllocationId"] 
               },
                "ConnectivityType": "public",
                "SubnetId" : { 
                   "Ref" : "PublicSubnet2" 
               },
                "Tags" : [ 
                   {
                        "Key" : "Name", 
                        "Value" : "cft-nat-gateway" 
                    } 
                ]
            }
         },
         "NATGatewayElasticIP" : {
            "Type" : "AWS::EC2::EIP",
            "DependsOn": "AttachGateway",
            "Properties" : {
               "Domain" : "vpc",
               "Tags":[
                    {
                        "Key":"Name",
                        "Value": "Elastic-IP"
                    }
               ]
            }
         },
         "PrivateRouteTable" : {
            "Type" : "AWS::EC2::RouteTable",
            "Properties" : {
               "VpcId" : { "Ref" : "VPC" },
               "Tags" : [ 
                    {
                        "Key" : "Name", 
                        "Value" : "private-RouteTable" 
                    } 
                ]
            }
        },
        "NATGatewayRoute" : {
            "Type" : "AWS::EC2::Route",
            "DependsOn" : "AttachGateway",
            "Properties" : {
                "NatGatewayId" : { "Ref" : "PrivateRouteTable" },
                "DestinationCidrBlock" : "0.0.0.0/0",
                "GatewayId" : { "Ref" : "NATGatewayPublicSubnet2" }
            }
        },
        "AppLayer1PrivateSubnetAssociation" : {
            "Type" : "AWS::EC2::SubnetRouteTableAssociation",
            "Properties" : {
                "SubnetId" : { "Ref" : "PrivateSubnet1" },
                "RouteTableId" : { "Ref" : "PrivateRouteTable" }
            }
        },
        "AppLayer2PrivateSubnetAssociation" : {
            "Type" : "AWS::EC2::SubnetRouteTableAssociation",
            "Properties" : {
                "SubnetId" : { "Ref" : "PrivateSubnet2" },
                "RouteTableId" : { "Ref" : "PrivateRouteTable" }
            }
        },
        "ALBASG": {
            "Type" : "AWS::EC2::SecurityGroup",
            "Properties" : {
                "GroupDescription" : "Wordpress-ALB",
                "GroupName" : "LoadBalancer-SG",
                "VpcId" : {"Ref": "VPC"},
                "SecurityGroupIngress" : [
                    {
                        "CidrIp" : "0.0.0.0/0",
                        "FromPort" : 80,
                        "IpProtocol" : "tcp",
                        "ToPort" : 80
                    },
                    {
                        "CidrIp" : "0.0.0.0/0",
                        "FromPort" : 443,
                        "IpProtocol" : "tcp",
                        "ToPort" : 443 
                    }
                ],
                "Tags" : [
                    {
                        "Key": "Name",
                        "Value": "LoadBalancer-SG"
                    }
                ]
            }
        },
        "BastionHostSG": {
            "Type" : "AWS::EC2::SecurityGroup",
            "Properties" : {
                "GroupDescription" : "Wordpress-Bastion-SG",
                "GroupName" : "Bastion-SG",
                "VpcId" : {"Ref": "VPC"},
                "SecurityGroupIngress" : [
                    {
                        "CidrIp" : "0.0.0.0/0",
                        "FromPort" : 22,
                        "IpProtocol" : "tcp",
                        "ToPort" : 22
                    }
                ],
                "Tags" : [
                    {
                        "Key": "Name",
                        "Value": "BastionHost-SG"
                    }
                ]
            }
        },
        "AppServerSG": {
            "Type" : "AWS::EC2::SecurityGroup",
            "Properties" : {
                "GroupDescription" : "AppLayer-SG",
                "GroupName" : "Wordpress-SG",
                "VpcId" : {"Ref": "VPC"},
                "SecurityGroupIngress" : [
                    {
                        "CidrIp" : {"Ref": "BastionHostSG"},
                        "FromPort" : 22,
                        "IpProtocol" : "tcp",
                        "ToPort" : 22
                    },
                    {
                        "CidrIp" : {"Ref": "ALBASG"},
                        "FromPort" : 80,
                        "IpProtocol" : "tcp",
                        "ToPort" : 80 
                    }
                ],
                "Tags" : [
                    {
                        "Key": "Name",
                        "Value": "AppLayer-SG"
                    }
                ]
            }
        }
        
    }
}